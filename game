<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crocodile Click Counter</title>
    <script src="https://cdn.tailwindcss.com"></script> 
    <style>
        /* Use Inter font */
        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden; 
        }
        /* Base image styles */
        img#crocodileImage { 
            min-height: 300px; max-width: 100%; height: auto; object-fit: cover; 
            display: block; margin-left: auto; margin-right: auto;
            border-radius: 0.5rem; 
        }
        /* Points counter styles */
        #pointsDisplay {
            font-size: 1.25rem; font-weight: 600; color: #065f46; margin-top: 1.5rem; 
            padding: 0.75rem 1.25rem; background-color: #a7f3d0; border-radius: 0.75rem; 
            display: inline-flex; align-items: center; gap: 0.5rem; border: 2px solid #047857; 
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); transition: background-color 0.2s ease-in-out; 
        }
        #pointsDisplay:hover { background-color: #6ee7b7; }

        /* Prize message OVERLAY styles */
        #prizeMessageDisplay {
            position: absolute; inset: 0; background-color: rgba(0, 0, 0, 0.8); 
            color: white; font-weight: 600; text-align: center;
            display: flex; flex-direction: column; align-items: center; justify-content: center; 
            padding: 1rem; border-radius: 0.5rem; opacity: 0; 
            transition: opacity 0.3s ease-in-out; pointer-events: none; visibility: hidden; 
        }
        #prizeMessageDisplay.visible { opacity: 1; visibility: visible; pointer-events: auto; }
        
        /* Style for the "Create Post on X" link/button */
        .tweet-button {
            display: inline-block; 
            margin-top: 1rem; padding: 0.6rem 1.2rem; background: linear-gradient(to bottom, #38bdf8, #0ea5e9); 
            color: white; border-radius: 9999px; 
            font-weight: bold; cursor: pointer; border: 1px solid #0369a1; 
            text-decoration: none; 
            transition: all 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            text-shadow: 1px 1px 1px rgba(0,0,0,0.2);
        }
         .tweet-button:hover { 
             background: linear-gradient(to bottom, #0ea5e9, #0284c7); 
             box-shadow: 0 4px 8px rgba(0,0,0,0.2); 
             transform: translateY(-1px); 
         } 
         .tweet-button:active { 
             transform: translateY(1px); 
             box-shadow: 0 1px 2px rgba(0,0,0,0.2); 
         }

        /* Click animation for the image flash */
        @keyframes click-bounce { 0%, 100% { transform: scale(1); } 50% { transform: scale(0.96); } }
        .image-flash-animation { animation: click-bounce 0.3s ease-out; }

    </style>
</head>
<body class="bg-gradient-to-br from-emerald-200 to-teal-400 flex items-center justify-center min-h-screen p-4">

    <div class="bg-white p-8 rounded-xl shadow-xl text-center max-w-md w-full">
        <h1 class="text-3xl font-semibold text-emerald-900 mb-6">Click the Crocodile!</h1>
        <div class="relative cursor-pointer mb-6 transition-transform duration-200 ease-in-out hover:scale-105">
            <img id="crocodileImage" src="https://i.imgur.com/2bJh2OL.png" alt="Crocodile holding knife" class="rounded-lg border-4 border-emerald-700 shadow-lg" onerror="this.onerror=null; this.src='https://placehold.co/400x300/cccccc/555555?text=Image+Load+Error'; this.alt='Image loading error'">
            <div id="prizeMessageDisplay"></div>
        </div>
        <div class="mt-6">
             <span id="pointsDisplay"><span class="text-xl">ðŸ‘†</span> <span>Click Points: 0</span></span>
        </div>
    </div>

    <script>
        // --- Optimization: Encapsulate code in an IIFE ---
        (function() {
            // --- Optimization: Cache DOM element selections ---
            const crocodileImage = document.getElementById('crocodileImage');
            const pointsDisplay = document.getElementById('pointsDisplay');
            // Ensure pointsTextSpan is selected correctly (it's the second span inside pointsDisplay)
            const pointsTextSpan = pointsDisplay ? pointsDisplay.querySelector('span:last-child') : null; 
            const prizeDisplay = document.getElementById('prizeMessageDisplay'); 

            // Check if essential elements were found
            if (!crocodileImage || !pointsDisplay || !pointsTextSpan || !prizeDisplay) {
                console.error("Initialization failed: Could not find one or more required elements.");
                return; // Stop script execution if elements are missing
            }

            // Image States
            const imageState1 = { src: "https://i.imgur.com/2bJh2OL.png", alt: "Crocodile holding knife" };
            const imageState2 = { src: "https://i.imgur.com/n8Lx0oM.png", alt: "Crocodile with knife near head" };

            // Points Tracking
            let clickPoints = 0;

            // Cooldown Config
            let isClickAllowed = true; 
            const cooldownDuration = 500; 
            const prizeFreezeDuration = 3000; 
            const flashDuration = 400; 
            const animationDuration = 300; 

            // Prize Config
            const prizeChance = 0.002; // 0.2% chance 

            // --- generatePrizeCode Function ---
            function generatePrizeCode(points, length = 4) { 
                const timestamp = Date.now(); 
                const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                let randomPart = '';
                for (let i = 0; i < length; i++) {
                    randomPart += characters.charAt(Math.floor(Math.random() * characters.length));
                }
                let result = `PRIZE-${timestamp}-${points}-${randomPart}`; 
                return result;
            }

            // --- Main Click Handler ---
            function handleImageClick() {
                if (!isClickAllowed) return; 
                
                isClickAllowed = false; 
                let currentCooldown = cooldownDuration; 
                prizeDisplay.classList.remove('visible'); 
                prizeDisplay.innerHTML = ''; 

                try {
                    clickPoints++;
                    // Use cached element reference
                    pointsTextSpan.textContent = `Click Points: ${clickPoints}`; 
                    let wonPrize = false; 
                    
                    const winCheck = Math.random(); 
                    if (winCheck < prizeChance) { 
                        wonPrize = true; 
                        const prizeCode = generatePrizeCode(clickPoints); 
                        
                        const twitterHandle = "@croc_with_knife"; 
                        const tickerSymbol = "$STAB"; 
                        const targetUrl = "https://x.com/compose/post"; 

                        // Use cached element reference
                        prizeDisplay.innerHTML = `
                            <div class="text-2xl mb-2">ðŸŽ‰ Congratulations! You won! ðŸŽ‰</div>
                            <div>Your code: <strong class="text-yellow-300 text-lg">${prizeCode}</strong></div>
                            <div class="mt-2 text-sm">
                                1. Create a post about ${tickerSymbol} on X and tag ${twitterHandle}.<br>
                                2. Then DM me the code.
                            </div>
                            <a href="${targetUrl}" target="_blank" rel="noopener noreferrer" class="tweet-button">
                                Create Post on X 
                            </a> 
                        `; 
                        
                        // Show the overlay using cached element reference
                        prizeDisplay.classList.add('visible'); 
                        currentCooldown = prizeFreezeDuration; 
                    } else {
                        // No prize won
                    }

                    // Flash Image 2 (Only if no prize was won)
                    if (!wonPrize) { 
                        // Use cached element reference
                        crocodileImage.src = imageState2.src; 
                        crocodileImage.alt = imageState2.alt;
                        crocodileImage.classList.add('image-flash-animation');
                        setTimeout(() => { crocodileImage.classList.remove('image-flash-animation'); }, animationDuration); 
                        setTimeout(() => {
                            if (crocodileImage.src === imageState2.src) { 
                                crocodileImage.src = imageState1.src; 
                                crocodileImage.alt = imageState1.alt;
                            }
                        }, flashDuration); 
                    }
                    
                    // Set cooldown timer
                    setTimeout(() => { 
                        isClickAllowed = true; 
                    }, currentCooldown); 

                } catch (error) {
                    console.error("Error handling click:", error); 
                    // Use cached element reference
                    pointsTextSpan.textContent = "Error!";
                    // Use cached element reference
                    prizeDisplay.innerHTML = 'An error occurred. Please try again.';
                    // Use cached element reference
                    prizeDisplay.classList.add('visible'); 
                    // Use cached element reference
                    crocodileImage.src = imageState1.src; 
                    crocodileImage.alt = imageState1.alt;
                    setTimeout(() => { 
                        isClickAllowed = true; 
                    }, cooldownDuration); 
                }
            }

            // --- Initialize ---
            function initializeApp() {
                // Set initial image using cached element reference
                crocodileImage.src = imageState1.src;
                crocodileImage.alt = imageState1.alt;
                
                // --- Optimization: Attach listener using JS ---
                crocodileImage.addEventListener('click', handleImageClick);

                preloadImages();
            }
            
            function preloadImages() {
                const tempImage = new Image();
                tempImage.onload = () => {}; 
                tempImage.onerror = () => {
                    console.warn("Failed to preload state 2 image.");
                    imageState2.src = 'https://placehold.co/400x300/cccccc/555555?text=Image+Load+Error+2';
                    imageState2.alt = 'Image loading error';
                };
                tempImage.src = imageState2.src; 
                const tempImage1 = new Image();
                tempImage1.onload = () => {}; 
                 tempImage1.onerror = () => {
                    console.warn("Failed to preload state 1 image.");
                    imageState1.src = 'https://placehold.co/400x300/cccccc/555555?text=Image+Load+Error+1';
                    imageState1.alt = 'Image loading error';
                };
                tempImage1.src = imageState1.src;
            }

            // --- Run Initialization ---
            // Use DOMContentLoaded to ensure elements exist before manipulation
            if (document.readyState === 'loading') {
                 document.addEventListener('DOMContentLoaded', initializeApp);
            } else {
                 // DOMContentLoaded has already fired
                 initializeApp();
            }

        })(); // --- End of IIFE ---

    </script>

</body>
</html>
